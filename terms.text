What is SDLC?
 SDLC stands for software development life cycle , it is a systematic process of planning,design,devloping,testing,deployement and maintaining software in a it industry.By using this methodology we can build a high quality product which will meet the customers needs and also budget constraints.
 The phases are:
 1.Requirement Analysis: “What are the current problems?” This stage of the SDLC means getting input from all stakeholders, including customers, salespeople, industry experts, and programmers. Learn the strengths and weaknesses of the current system with improvement as the goal.
 2.planning: “What do we want?” In this stage of the SDLC, the team determines the cost and resources required for implementing the analyzed requirements. It also details the risks involved and provides sub-plans for softening those risks.
 In other words, the team should determine the feasibility of the project in terms of technical, operational, and economic aspects and how they can implement the project successfully with the lowest risk in mind.
 3.Designing: Create a detailed system design based on the requirements. Specify the architecture, components, modules, interfaces, and data for the system and also design the UI hows it looks.
 4.devloping(implementing): Write the code for the software according to the design specifications.
 5:Test: Test the code which was written by the devloper and fix those issue until the product meets the original specifications.
 6:Deployement: Release the software for production use.Deploy the application to the target environment.
 7:Maintenance and Support:Address and fix any issues identified in the live environment.Implement updates, enhancements, or patches as needed.Provide ongoing support and maintenance.

 //What is Agile Methodology?
Agile is an iterative and incremental approach. It divides the project into small increments with minimal planning so we can build a high qality product and it allows for flexibility and changes throughout the development process.

Iterations (Sprints):
Planning: High-level planning is done, and the project is divided into iterations (sprints).
Requirements: Detailed requirements are gathered for the specific features to be developed in the upcoming iteration.
Coding: Development and coding take place in short iterations.
Testing: Testing is performed during and at the end of each iteration.
Review: A review is conducted at the end of each iteration to evaluate progress and adjust the plan for the next iteration.

Client Involvement: Clients and stakeholders are involved throughout the project. Changes in requirements can be accommodated at the beginning of each iteration.
Flexibility: Agile allows for changes and adjustments even late in the development process, making it well-suited for projects where requirements are expected to evolve.

//Differences:Agile vrs Waterfall
1:Flexibility: Agile is more flexible and adaptable to changes in requirements, while Waterfall is less accommodating to changes once the project has started.
2:Client Involvement: Agile involves clients and stakeholders continuously throughout the project, whereas Waterfall typically involves clients mainly at the beginning and the end.
3:Delivery: Agile delivers a potentially shippable product incrementally, while Waterfall delivers the entire product at the end of the project.
4:Risk Management: Agile allows for early detection and correction of issues, while Waterfall identifies issues later in the process.


const express=require("express");
const app=express();
const mongoose=require("mongoose")
const url="mongodb://localhost/27017/userdb"
const port=3000;

mongoose.connect(url,{useNewUrlParser: true,useUnifiedTopology:true}).then(()={
    console.log("Mongodb Connected successfully)
}).catch(()=>{
    console.log("Mongodb connection fail")
})

app.use(express.json())

app.get("/",(req,res)=>{
    res.send 
})
app.listen(port,()={
console.log("Server connected successfully")
})

const axios=require("axios")
const url="http://sagdgshj"
axios.get(url).then((response)=>{
console.log(response.data)
}).catch((error)=>{
console.log("Error")
})

//schema modules
const express=require("express")
const mongoose =require("mongoose")

const userSchema =new mongoose.Schema({
    name:{
        type:string,
        required:true
    },
    age:{
        required:true
    }
})

module.exports=mongoose.model("User",userSchema)


//fetch APIs

fetch('https://api.example.com/data')
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok ' + response.statusText);
    }
    return response.json(); // or response.text() for plain text
  })
  .then(data => {
    console.log(data); // Handle the data from the response
  })
  .catch(error => {
    console.error('There has been a problem with your fetch operation:', error);
  });

//or fetch('https://api.example.com/data', {
  method: 'POST',
  headers:{
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    key1: 'value1',
    key2: 'value2'
  })
})
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok ' + response.statusText);
    }
    return response.json();
  })
  .then(data => {
    console.log(data); // Handle the data from the response
  })
  .catch(error => {
    console.error('There has been a problem with your fetch operation:', error);
  });


//use memo
import React, { useState, useMemo } from "react";

const Memo = () => {
  const [myNum, setMyNum] = useState(0);
  const [show, setShow] = useState(false);

  const getValue = () => {
    return setMyNum(myNum + 1);
  };

  const countNumber = (num) => {
    console.log("🚀 ~ file: Memo.jsx ~ line 12 ~ countNumber ~ num", num);
    for (let i = 0; i <= 1000000000; i++) {}
    return num;
  };

  // subscribe to thapa technical
    const checkData=countNumber(myNum)//previously and processing slow
    //by using usememo hook you load it faster
  const checkData = useMemo(() => {
    return countNumber(myNum);
  }, [myNum]);

  return (
    <>
      <button onClick={getValue} style={{ backgroundColor: "red" }}>
        Counter
      </button>
      <p> My new number : {checkData} </p>
      <button onClick={() => setShow(!show)}>
        {show ? "You clicked me" : "Click me plz"}
      </button>
    </>
  );
};

export default Memo;

//MicroServices
Microservices, also known as the microservices architecture, is an approach to software development where a large application is decomposed into small, independent services. Each of these services is designed to perform a specific business function and can operate independently of the others. These services communicate with each other through well-defined APIs (Application Programming Interfaces), typically over a network.

Key characteristics of microservices include:

Modularity: Each microservice is a self-contained module, focusing on a specific business capability.

Independence: Microservices can be developed, deployed, and scaled independently. Changes to one microservice do not necessarily affect others. 

Resilience: If one microservice fails, it doesn't necessarily bring down the entire application. The rest of the system can continue to function.

Scalability: Individual microservices can be scaled independently based on the specific needs of the application.
 
Technology Diversity: Different microservices within an application can be built using different technologies, programming languages, and frameworks.

Continuous Delivery: Microservices enable continuous integration and continuous delivery practices, allowing for faster and more frequent releases.

Autonomy: Development teams can work on individual microservices independently, enabling faster development cycles and the use of different development technologies.

While microservices offer many advantages, they also come with challenges, such as increased complexity in terms of communication between services, data consistency, and management of distributed systems. Adopting a microservices architecture requires careful planning and consideration of these challenges to fully realize the benefits.

drawbacks
//complexity
//testing
//deployement

//A monolithic application is a traditional software architecture where all the components of an application are tightly integrated and interconnected. In a monolithic architecture, the entire application is developed, deployed, and scaled as a single unit. The term "monolithic" refers to the fact that the application is a single, indivisible entity.
  
Key characteristics of monolithic applications include:

Single Codebase: The entire application is developed and maintained within a single codebase.

Tight Integration: All components of the application are tightly coupled and share the same memory space.

Single Deployment Unit: The application is typically deployed as a single unit, and any updates or changes to the application require the deployment of the entire monolith.

Centralized Database: Monolithic applications often have a single, centralized database that serves all functionalities of the application.

Scalability Challenges: Scaling a monolithic application can be challenging because the entire application needs to be replicated to handle increased load.

Technology Stack Uniformity: Since the entire application is developed as a single unit, it usually relies on a uniform set of technologies, frameworks, and programming languages.

While monolithic architectures have been widely used and are still prevalent, they come with some drawbacks. For example, as the application grows, it can become more challenging to maintain, scale, and deploy updates. Monolithic architectures may also be less flexible in terms of adopting new technologies or accommodating changes in specific parts of the application.

In contrast, microservices architecture, which was mentioned in a previous response, aims to address some of these challenges by breaking down the application into smaller, independent services. Each service in a microservices architecture operates as a separate entity, making it easier to develop, deploy, and scale individual components independently.