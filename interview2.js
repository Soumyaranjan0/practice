// const x=(4,5,6)
// console.log("x =",x);

// function abc(){

// }
// var abc;
// console.log(abc); //[function: abc] //takes function as first priority and also abc is not assign any value

// let n =10;
// console.log(n.toString()); //10
// console.log(n.toString(8)); //12
// n.toString(16) (Hexadecimal): "a"
// n.toString(8) (Octal): "12"
// n.toString(10) (Decimal): "10"

// function a(){
//     console.log("object");
// }
// console.log(a()); //object undefined

// function abc(){
//     console.log("xyz");
// }
// console.log(abc.name); //abc

// console.log(abc); //abc is not defined

// var abc =100;
// let xyz=200;
// console.log(window.abc); //100
// console.log(window.xyz); //reference error: window is not defined

// function abc(n1,n2){
//     "use strict"
//     n1=300;
//     n2=400;
//     return arguments[0]+arguments[1]
// }
// console.log(abc(100,200)); //300

// "use strict"
// {
//     function abc(){
//         console.log("abc");
//     }
// }
// abc() //reference error: abc is not defined
//abc if "use strict" is not there

// function abc(){
//     a=8;
//     console.log(a);
// }
// abc() //ReferenceError: Cannot access 'a' before initialization
// let a;

// class abc{

// }
// console.log(typeof(abc)); //function

// new xyz() //ReferenceError: Cannot access 'xyz' before initialization
// function abc(){
//     console.log("object");
// }
// class xyz{ //clas is not hoisted

// }

// const abc = 10 + isNaN(2) ? 100 : 200; //for truthy value it will return 100
// console.log(abc);

// console.log(10==10); //true
// console.log(10==10==10); //false
// console.log(10==10==10==0); //true

// console.log(parseInt(""));  // NaN (no numbers to parse)
// console.log(Number(""));  // 0   (empty string coerced to 0)
// console.log(parseInt(true));  // NaN
// console.log(Number(true));  //1

// Feature	                 package.json	                        package-lock.json
// Purpose	Defines project metadata and dependencies.	        Locks exact dependency versions.
// Editable	Manually edited by developers.	                    Automatically generated by npm.
// Version  Control	Specifies version ranges for dependencies.	Ensures exact versions are installed.
// Scope	High-level dependency list.	                        Detailed dependency tree(includes sub-dependencies)
// Reproducibility	Allows flexibility in versions.	            Guarantees consistent installs.

// In package.json, a caret (^) in a dependency version specifies a version range. It allows for flexibility in upgrading to newer versions of the dependency, as long as the upgrades do not break the major version (based on Semantic Versioning).
// MAJOR.MINOR.PATCH
// MAJOR: Breaking changes
// MINOR: Backward-compatible new features
// PATCH: Backward-compatible bug fixes

// Caret (^) Rule:
// Allows updates to MINOR and PATCH versions, but not MAJOR.
// "express": "^4.17.1"
// This means: Accept versions >= 4.17.1 but < 5.0.0.

//Exact version (no prefix):"express": "4.17.1"

// Tilde (~):
// "express": "~4.17.1"
// Allows updates to PATCH versions: >= 4.17.1 but < 4.18.0.

// Key Differences
// Feature	npm	npx
// Purpose	Manages packages (install/update/remove).	Executes packages without global installation.
// Usage	Used to add dependencies to a project.	Used to run package binaries or CLI tools directly.
// Global Installation	Often requires global installation for CLI tools.	No need to install globally; downloads  and runs on demand.
// Dependency Management	Works with package.json to manage project dependencies.	Executes a package and its binaries, regardless of package.json.
// Temporary Use	Not ideal for temporary use of packages.	Perfect for one-time or temporary usage.

//The <marquee> tag in HTML is used to create a scrolling text or image effect, moving horizontally or vertically across the web page.

// let count=0;
// const nums=[0,1,2,3]
// nums.forEach((nums)=>{
//     console.log(nums)
//     if(nums){
//         count=count+1
//     }
// })
// console.log(count) //3 for 0 it will not count

// const arr=[2,3,4,5]
// arr.slice(0,1) //slice method create a new array without modifying the existing array
// console.log(arr) //[2,3,4,5]

//slice() methods:
// const fruits = ["apple", "banana", "cherry", "date"];
// const sliced = fruits.slice(1, 3); // Extracts from index 1 to 3 (excluding 3)
// console.log(sliced); // Output: ["banana", "cherry"]

//splice() methods:
// const fruits = ["apple", "banana", "cherry", "date"];
// Remove 2 elements starting from index 1
// const removed = fruits.splice(1, 2);

// console.log(fruits); // Output: ["apple", "date"] (modified original array)
// console.log(removed); // Output: ["banana", "cherry"] (removed elements)

// const obj = {
//   a: 1,
//   b: 2,
//   c: 3,
//   "a": 5,
//   b: 7,
// };
// console.log(obj); //{ a: 5, b: 7, c: 3 }

// console.log(!"hello"); //false
// console.log(+false); //0
// console.log(""==false); //true
// console.log(""===false); //false

// var a = 1+ abc
// var abc=100 //it will hoisted to the top but the value is undefined.so,it will print NaN
// console.log(a); //NaN

// const data={
//     name:"soumya"
// }
// const arr=[1,2,3,4,5]
//delete operator always retuns the boolean value
// console.log(delete data); //false
// console.log(delete arr); //false
// console.log(delete arr[1]); //true

// const [x, y] = abc;
// console.log(x, y); //ReferenceError: abc is not defined

//infinity curring
// function sum(a) {
//     let total = a;
    
//     function inner(b) {
//       if (b === undefined) {  // Termination condition
//         return total;
//       }
//       total += b;
//       return inner;  // Return the function itself for chaining
//     }
    
//     return inner;
//   }
  
//   console.log(sum(1)(2)(3)(4)());

//Use Cases of the <canvas>:
// Drawing 2D shapes: Rectangles, circles, lines, etc.
// Rendering images: You can draw images and manipulate them on the canvas.
// Creating animations: By continuously updating the canvas, you can create dynamic animations.
// Games: HTML5 canvas is often used for rendering game graphics.
// Graphs and charts: You can use the canvas to draw visual data representations like bar charts or line graphs.

//Pseudo-Elements are used to style specific parts of an element, rather than the whole element itself. They allow you to apply styles to certain content or portions of an element that are not part of the actual HTML structure, like the first letter of a paragraph or the content before or after an element.

// const arr=[1,2,3,4,5]
// const result=arr.map((ele)=>{
//     return ele>2
// })
// console.log(result); //[ false, false, true, true, true ]

//Object Destructuring
// const person = {
//     name: "Alice",
//     age: 25,
//     country: "USA"
//   };
  
//   const { name, age, country } = person;
//   console.log(name); // Alice
//   console.log(age); // 25
//   console.log(country); // USA

// Feature                	<a> Tag	                                           <link> Tag
// Purpose	Creates a hyperlink for navigation (clickable link).	Links external resources to the document (e.g., CSS, icons).
// Common Usage	Navigating to other pages or resources.	Linking external stylesheets, icons, or preloading assets.
// Attributes	href, target, title, rel, etc.	            rel, href, type, sizes, etc.
// Display	    Creates a clickable element (text or link).	Does not display anything on the page.
// Placement	Anywhere in the body of the document.	    Usually placed in the <head> section of the document.
// Self-closing	No, it requires both an opening and closing tag (<a></a>). Yes, it is self-closing (<link />).

// const arr = [1, 2, 3, 4][1, 2, 3]; // Interpreted as [1, 2, 3, 4][3]
//take second array is an expression and retun the last value mean arr[3]
// console.log(arr); // Output: 4

// let  obj={
//     1:"a",
//     2:"b",
//     "2":"b",
//     [1]:"b"
// }
// console.log(obj); //{ '1': 'b', '2': 'b' }

// {
//     function fn1(){
//         console.log("Hi");
//     }
// }
// fn1() //Hi

// function fn(){
//     return 100;
// }
// var fn
// console.log(fn); //[Function: fn],it take function as higher priority

// class abc{

// }
// console.log(typeof(abc)); //typeof class is function

// console.log(null==undefined); //true
// console.log(null===undefined); //false

// const arr=[1,2,3,4,5]
// const res=arr.find(ele=>ele>2)
// console.log(res)  // result:3  //find method always returns the first elemnt after checking the condition

// function sum(a=100,b=200){
//     return a+b
// }
// console.log(sum(null,20));  //0+20=20

// function sum1(a=100,b=200){
//     return a+b
// }
// console.log(sum1(undefined,20)); //100+20=120

// const arr=[1,2,3,4,5]
// console.log(arr.unshift(9)); //6
// console.log(arr); //[ 9, 1, 2, 3, 4, 5 ]
// console.log(arr.slice(1,3));//[ 2, 3 ]
// console.log(arr); //[ 1, 2, 3, 4, 5 ]